openapi: 3.0.0
info:
  title: Swagger Petch
  description: Swagger da Petch
  contact:
    email: luara.oliveira8@gmail.com
  version: 1.0.0

servers:
  - url: http://localhost:8000

security:
  - Bearer: []

tags:
  - name: Gifts
  - name: Ongs
  - name: Partners
  - name: Roles
  - name: Scheduling Types
  - name: Solicitation Types
  - name: Species
  - name: Users

components:
  securitySchemes:
    Bearer:
      type: http
      bearerFormat: JWT
      scheme: bearer
  schemas:
    Gifts:
      type: object
      properties:
        id:
          type: integer
          uniqueItems: true
        name:
          type: string
        description:
          type: string
        size:
          type: string
          default: null
        weight:
          type: string
          default: null
        taste:
          type: string
          default: null
        color:
          type: string
          default: null
        media:
          type: string
          default: null
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
        deletedAt:
          type: string
          format: date
          default: null
      required:
        - id
        - name
        - description
        - createdAt
        - updatedAt
      example:
        id: 1
        name: Pestisco
        description: Pestisco para seu pet, ótimo para fortalecer os ossos
        taste: Churrasco
        weight: 1Kg
        media: https://images.unsplash.com/photo-1620954492246-f1f107f4ec89?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTR8fGxlYXNofGVufDB8fDB8fA%3D%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60
        createdAt: "2020-01-01T00:00:00.000Z"
        updatedAt: "2020-01-01T00:00:00.000Z"
        deletedAt: null
    Ongs:
      type: object
      properties:
        id:
          type: integer
          uniqueItems: true
        name:
          type: string
          uniqueItems: true
        email:
          type: string
          uniqueItems: true
        phone1:
          type: string
        phone2:
          type: string
          default: null
        phone3:
          type: string
          default: null
        cep:
          type: string
        address:
          type: string
        district:
          type: string
        complement:
          type: string
          default: null
        city:
          type: string
        uf:
          type: string
        actingStates:
          type: string
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
        deletedAt:
          type: string
          format: date
          default: null
      required:
        - id
        - name
        - email
        - phone1
        - cep
        - address
        - district
        - city
        - uf
        - actingStates
        - createdAt
        - updatedAt
      example:
        id: 1
        name: Dogs do Coração
        email: dogs@coracao.com.br
        phone1: 1132145698
        cep: 12345678
        address: Rua Principal, 123
        district: Centro
        city: São Paulo
        uf: SP
        actingStates: SP, SC, MG
        createdAt: "2020-01-01T00:00:00.000Z"
        updatedAt: "2020-01-01T00:00:00.000Z"
        deletedAt: null
    Partners:
      type: object
      properties:
        id:
          type: integer
          uniqueItems: true
        fantasyName:
          type: string
        companyName:
          type: string
        cnpj:
          type: string
        stateRegistration:
          type: string
        responsible:
          type: string
        email:
          type: string
        website:
          type: string
        phone1:
          type: string
        phone2:
          type: string
          default: null
        phone3:
          type: string
          default: null
        cep:
          type: string
        address:
          type: string
        district:
          type: string
        complement:
          type: string
          default: null
        city:
          type: string
        uf:
          type: string
        logo:
          type: string
          default: null
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
        deletedAt:
          type: string
          format: date
          default: null
      required:
        - id
        - fantasyName
        - companyName
        - cnpj
        - stateRegistration
        - responsible
        - email
        - website
        - phone1
        - cep
        - address
        - district
        - city
        - uf
        - createdAt
        - updatedAt
      example:
        id: 1
        fantasyName: Petz
        companyName: Petz Com. e Ind. de Produtos LTDA.
        cnpj: 05875578000105
        stateRegistration: 987178808780
        responsible: João Osvaldo Lima
        email: financeiro@petzltda.com.br
        website: https://petz.com.br
        phone1: 1138376789
        phone2: 11988525083
        phone3: null
        cep: 04298090
        address: Rua Bertolina Maria 561
        district: Vila Vermelha
        complement: null
        city: São Paulo
        uf: SP
        logo: https://images.unsplash.com/photo-1450778869180-41d0601e046e?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1150&q=80
        createdAt: "2020-01-01T00:00:00.000Z"
        updatedAt: "2020-01-01T00:00:00.000Z"
        deletedAt: null
    Roles:
      type: object
      properties:
        id:
          type: integer
          uniqueItems: true
        name:
          type: string
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
        deletedAt:
          type: string
          format: date
          default: null
      required:
        - id
        - name
        - createdAt
        - updatedAt
      example:
        id: 1
        name: Admin
        createdAt: "2020-01-01T00:00:00.000Z"
        updatedAt: "2020-01-01T00:00:00.000Z"
        deletedAt: null
    Scheduling Types:
      type: object
      properties:
        id:
          type: integer
          uniqueItems: true
        name:
          type: string
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
        deletedAt:
          type: string
          format: date
          default: null
      required:
        - id
        - name
        - createdAt
        - updatedAt
      example:
        id: 1
        name: Vacinação
        createdAt: "2020-01-01T00:00:00.000Z"
        updatedAt: "2020-01-01T00:00:00.000Z"
        deletedAt: null
    Solicitation Types:
      type: object
      properties:
        id:
          type: integer
          uniqueItems: true
        name:
          type: string
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
        deletedAt:
          type: string
          format: date
          default: null
      required:
        - id
        - name
        - createdAt
        - updatedAt
      example:
        id: 1
        name: Dúvidas
        createdAt: "2020-01-01T00:00:00.000Z"
        updatedAt: "2020-01-01T00:00:00.000Z"
        deletedAt: null
    Species:
      type: object
      properties:
        id:
          type: integer
          uniqueItems: true
        name:
          type: string
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
        deletedAt:
          type: string
          format: date
          default: null
      required:
        - id
        - name
        - createdAt
        - updatedAt
      example:
        id: 1
        name: Cachorro
        createdAt: "2020-01-01T00:00:00.000Z"
        updatedAt: "2020-01-01T00:00:00.000Z"
        deletedAt: null
    Users:
      type: object
      properties:
        id:
          type: integer
          uniqueItems: true
        googleId:
          type: string
          default: null
          uniqueItems: true
        name:
          type: string
        avatar:
          type: string
          default: null
        email:
          type: string
          uniqueItems: true
        emailVerified:
          type: boolean
          default: false
        tokenVerificationEmail:
          type: string
          default: null
        hash:
          type: string
        cpf:
          type: string
          uniqueItems: true
        birthday:
          type: string
        gender:
          type: string
          enum:
            - M
            - F
            - O
        cep:
          type: string
        address:
          type: string
        complement:
          type: string
          default: null
        district:
          type: string
        city:
          type: string
        uf:
          type: string
        phone:
          type: string
        tokenResetPassword:
          type: string
          default: null
        tokenResetPasswordExpires:
          type: string
          default: null
        roleId:
          type: integer
        createdAt:
          type: string
          format: date
        updatedAt:
          type: string
          format: date
        deletedAt:
          type: string
          format: date
          default: null
      required:
        - id
        - name
        - email
        - cpf
        - birthday
        - gender
        - cep
        - address
        - district
        - city
        - uf
        - phone
        - roleId
        - createdAt
        - updatedAt
      example:
        id: 1
        googleId: null
        name: Jane Doe
        avatar: https://images.unsplash.com/photo-1438761681033-6461ffad8d80?ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8cGVyc29ufGVufDB8fDB8fA%3D%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60
        email: janedoe@gmail.com
        emailVerified: true
        tokenVerificationEmail: null
        hash: $2b$10$9CuZ37./LpWBdPiH5VdDluCHEwtUW5793IFCUFJmk.CtPlGo8Tmc2
        cpf: 55122610029
        birthday: 1996-08-12
        gender: F
        cep: 01234567
        address: Avenida Paulista, 1111
        complement: null
        district: Centro
        city: São Paulo
        uf: SP
        phone: 1122457896
        tokenResetPassword: null
        tokenResetPasswordExpires: null
        roleId: 1
        createdAt: "2020-01-01T00:00:00.000Z"
        updatedAt: "2020-01-01T00:00:00.000Z"
        deletedAt: null

paths:
  /roles:
    get:
      tags:
        - Roles
      description: Retornar todas as funções cadastradas
      operationId: getRoles
      parameters:
        - name: name
          in: query
          description: Nome da função
          required: false
          schema:
            type: string
            example: Admin
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Roles"
  /roles/{id}:
    get:
      tags:
        - Roles
      description: Retornar uma função de acordo com o ID
      operationId: getRoleById
      parameters:
        - name: id
          in: path
          description: ID da função
          required: true
          schema:
            type: number
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Roles"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 404
                  message:
                    type: string
                    example: Função não encontrada
  /solicitationTypes:
    get:
      tags:
        - Solicitation Types
      description: Retornar todos os tipos de solicitação cadastradas
      operationId: getSolicitationTypes
      parameters:
        - name: name
          in: query
          description: Nome do tipo de solicitação
          required: false
          schema:
            type: string
            example: Dúvida
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Solicitation Types"
  /solicitationTypes/{id}:
    get:
      tags:
        - Solicitation Types
      description: Retornar um tipo de solicitação de acordo com o ID
      operationId: getSolicitationTypeById
      parameters:
        - name: id
          in: path
          description: ID do tipo de solicitação
          required: true
          schema:
            type: number
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Scheduling Types"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 404
                  message:
                    type: string
                    example: Tipo de solicitação não encontrada
  /schedulingTypes:
    get:
      tags:
        - Scheduling Types
      description: Retornar todos os tipos de agendamento cadastrados
      operationId: getSchedulingTypes
      parameters:
        - name: name
          in: query
          description: Nome do tipo de agendamento
          required: false
          schema:
            type: string
            example: Banho
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Scheduling Types"
  /schedulingTypes/{id}:
    get:
      tags:
        - Scheduling Types
      description: Retornar um tipo de agendamento de acordo com o ID
      operationId: getSchedulingTypeById
      parameters:
        - name: id
          in: path
          description: ID do tipo de agendamento
          required: true
          schema:
            type: number
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Scheduling Types"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 404
                  message:
                    type: string
                    example: Tipo de agendamento não encontrado
  /species:
    get:
      tags:
        - Species
      description: Retornar todas as espécies cadastradas
      operationId: getSpecies
      parameters:
        - name: name
          in: query
          description: Nome da espécie
          required: false
          schema:
            type: string
            example: Cachorro
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Species"
    post:
      tags:
        - Species
      description: Cadastrar uma nova espécie
      operationId: postSpecies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Species"
            example:
              name: Cavalo
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Species"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    example: Espécie já cadastrada
  /species/{id}:
    get:
      tags:
        - Species
      description: Retornar uma espécie de acordo com o ID
      operationId: getSpeiesById
      parameters:
        - name: id
          in: path
          description: ID da espécie
          required: true
          schema:
            type: number
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Species"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 404
                  message:
                    type: string
                    example: Espécie não encontrada
  /gifts:
    get:
      tags:
        - Gifts
      description: Retornar todos os brindes cadastrados
      operationId: getGifts
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Gifts"
    post:
      tags:
        - Gifts
      description: Cadastrar um novo brinde
      operationId: createGift
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Teste
                description:
                  type: string
                  example: Pestisco para seu pet, ótimo para fortalecer os ossos
                taste:
                  type: string
                  example: Churrasco
                weight:
                  type: string
                  example: 1Kg
                color:
                  type: string
                size:
                  type: string
                media:
                  type: string
                  format: binary
                  example: image.png
              required:
                - name
                - description
            encoding:
              media:
                contentType: image
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                taste:
                  type: string
                weight:
                  type: string
                color:
                  type: string
                size:
                  type: string
              required:
                - name
                - description
              example:
                id: 1
                name: Pestisco
                description: Pestisco para seu pet, ótimo para fortalecer os ossos
                taste: Churrasco
                weight: 1Kg
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Gifts"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                  message:
                    type: string
                example:
                  statusCode: 400
                  message: Arquivo não suportado
  /gifts/{id}:
    get:
      tags:
        - Gifts
      description: Retornar um brinde de acordo com o ID
      operationId: findGiftById
      parameters:
        - name: id
          in: path
          description: ID do brinde
          required: true
          schema:
            type: number
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Gifts"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 404
                  message:
                    type: string
                    example: Brinde não encontrado
  /partners:
    get:
      tags:
        - Partners
      description: Retornar todos os parceiros cadastrados
      operationId: getPartners
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Partners"
    post:
      tags:
        - Partners
      description: Cadastrar um novo parceiro
      operationId: createPartner
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fantasyName:
                  type: string
                  example: Petshop
                companyName:
                  type: string
                  example: Petshop Com. e Ind. LTDA.
                cnpj:
                  type: string
                  example: 00.000.000/0001-01
                stateRegistration:
                  type: string
                  example: 000.000.000
                responsible:
                  type: string
                  example: John Doe
                email:
                  type: string
                  example: petshop@petshop.com.br
                website:
                  type: string
                  example: https://petshop.com.br
                phone1:
                  type: string
                  example: 1923451102
                phone2:
                  type: string
                  example: 19985547896
                phone3:
                  type: string
                  example: 1942541200
                cep:
                  type: string
                  example: 00123-999
                address:
                  type: string
                  example: Avenida Brasil, 456
                district:
                  type: string
                  example: Centro
                complement:
                  type: string
                  example: 14 andar
                city:
                  type: string
                  example: São Paulo
                uf:
                  type: string
                  example: SP
                media:
                  type: string
                  format: binary
              required:
                - fantasyName
                - companyName
                - cnpj
                - stateRegistration
                - responsible
                - email
                - website
                - phone1
                - cep
                - address
                - district
                - city
                - uf
            encoding:
              media:
                contentType: image
          application/json:
            schema:
              type: object
              properties:
                fantasyName:
                  type: string
                companyName:
                  type: string
                cnpj:
                  type: string
                stateRegistration:
                  type: string
                responsible:
                  type: string
                email:
                  type: string
                website:
                  type: string
                phone1:
                  type: string
                phone2:
                  type: string
                phone3:
                  type: string
                cep:
                  type: string
                address:
                  type: string
                district:
                  type: string
                complement:
                  type: string
                city:
                  type: string
                uf:
                  type: string
              required:
                - fantasyName
                - companyName
                - cnpj
                - stateRegistration
                - responsible
                - email
                - website
                - phone1
                - cep
                - address
                - district
                - city
                - uf
              example:
                fantasyName: Petshop
                companyName: Petshop Com. e Ind. LTDA.
                cnpj: 00.000.000/0001-01
                stateRegistration: 000.000.000
                responsible: John Doe
                email: petshop@petshop.com.br
                website: https://petshop.com.br
                phone1: 1923451102
                phone2: 19985547896
                phone3: 1942541200
                cep: 00123-999
                address: Avenida Brasil, 456
                district: Centro
                complement: 14 andar
                city: São Paulo
                uf: SP
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Partners"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                  message:
                    type: string
                oneOf:
                  - example:
                      statusCode: 400
                      message: Arquivo não suportado
                  - example:
                      statusCode: 400
                      message: Parceiro já cadastrado
                  - example:
                      statusCode: 400
                      message: CNPJ inválido
                  - example:
                      statusCode: 400
                      message: CEP inválido
                  - example:
                      statusCode: 400
                      message: E-mail inválido
                  - example:
                      statusCode: 400
                      message: Número de telefone/celular inválido
  /partners/{id}:
    get:
      tags:
        - Partners
      description: Retornar um parceiro de acordo com o ID
      operationId: findPartnerById
      parameters:
        - name: id
          in: path
          description: ID do parceiro
          required: true
          schema:
            type: number
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Partners"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 404
                  message:
                    type: string
                    example: Parceiro não encontrado
  /ongs:
    get:
      tags:
        - Ongs
      description: Retornar todas as ONGs cadastradas
      operationId: getOngs
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Ongs"
    post:
      tags:
        - Ongs
      description: Cadastrar uma nova ONG
      operationId: createOng
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phone1:
                  type: string
                phone2:
                  type: string
                phone3:
                  type: string
                cep:
                  type: string
                address:
                  type: string
                district:
                  type: string
                complement:
                  type: string
                city:
                  type: string
                uf:
                  type: string
                actingStates:
                  type: string
              required:
                - name
                - email
                - phone1
                - cep
                - address
                - district
                - city
                - uf
                - actingStates
              example:
                id: 1
                name: Recanto dos Amiguinhos
                email: recantodosamiguinhos@gmail.com
                phone1: 1122300241
                phone2: 11995410023
                cep: 01234123
                address: Avenida Brasil, 654
                district: Centro
                city: São Paulo
                uf: SP
                actingStates: SP, SC, PR, RJ
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ongs"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 400
                  message:
                    type: string
                    oneOf:
                      - example: ONG já cadastrada
                      - example: CEP inválido
                      - example: E-mail inválido
                      - example: Número de telefone/celular inválido
  /ongs/{id}:
    get:
      tags:
        - Ongs
      description: Retornar uma ONG de acordo com o ID
      operationId: findOngById
      parameters:
        - name: id
          in: path
          description: ID da ONG
          required: true
          schema:
            type: number
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ongs"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 404
                  message:
                    type: string
                    example: ONG não encontrada
    delete:
      tags:
        - Ongs
      description: Inativar uma ONG de acordo com o ID
      operationId: deleteOng
      parameters:
        - name: id
          in: path
          description: ID da ONG
          required: true
          schema:
            type: number
            example: 1
      responses:
        204:
          description: No Content
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 404
                  message:
                    type: string
                    example: ONG não encontrada
  /users:
    get:
      tags:
        - Users
      description: Retornar todos os usuários cadastrados
      operationId: getUsers
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Users"
    post:
      tags:
        - Users
      description: Cadastrar um novo usuário
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  example: johndoe@gmail.com
                password:
                  type: string
                  example: JohnD@123
                confirmPassword:
                  type: string
                  example: JohnD@123
                cpf:
                  type: string
                  example: 000.000.000-00
                gender:
                  type: string
                  example: M
                birthday:
                  type: string
                  example: 1990-01-01
                phone1:
                  type: string
                  example: 1923451102
                cep:
                  type: string
                  example: 00123-999
                address:
                  type: string
                  example: Avenida Brasil, 456
                district:
                  type: string
                  example: Centro
                complement:
                  type: string
                  example: 2 andar, apto 21
                city:
                  type: string
                  example: São Paulo
                uf:
                  type: string
                  example: SP
                isAdmin:
                  type: boolean
                  example: false
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  example: johndoe@gmail.com
                password:
                  type: string
                  example: JohnD@123
                confirmPassword:
                  type: string
                  example: JohnD@123
                cpf:
                  type: string
                  example: 000.000.000-00
                gender:
                  type: string
                  example: M
                birthday:
                  type: string
                  example: 1990-01-01
                phone1:
                  type: string
                  example: 1923451102
                cep:
                  type: string
                  example: 00123-999
                address:
                  type: string
                  example: Avenida Brasil, 456
                district:
                  type: string
                  example: Centro
                complement:
                  type: string
                  example: 2 andar, apto 21
                city:
                  type: string
                  example: São Paulo
                uf:
                  type: string
                  example: SP
                isAdmin:
                  type: boolean
                  example: false
                media:
                  type: string
                  format: binary
              required:
                - name
                - email
                - password
                - confirmPassword
                - cpf
                - gender
                - birthday
                - phone1
                - cep
                - address
                - district
                - city
                - uf
            encoding:
              media:
                contentType: image
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Users"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                  message:
                    type: string
                oneOf:
                  - example:
                      statusCode: 400
                      message: Arquivo não suportado
                  - example:
                      statusCode: 400
                      message: Usuário já cadastrado
                  - example:
                      statusCode: 400
                      message: CPF inválido
                  - example:
                      statusCode: 400
                      message: CEP inválido
                  - example:
                      statusCode: 400
                      message: E-mail inválido
                  - example:
                      statusCode: 400
                      message: Número de telefone/celular inválido
                  - example:
                      statusCode: 400
                      message: Senha muito curta
                  - example:
                      statusCode: 400
                      message: Senha precisa ter uma letra maiúscula, uma letra minúscula, um caractere especial e um número
                  - example:
                      statusCode: 400
                      message: Senhas não correspondem
                  - example:
                      statusCode: 400
                      message: Você não tem a idade mínima de 18 anos
                  - example:
                      statusCode: 400
                      message: Data de nascimento inválida
  /users/{id}:
    get:
      tags:
        - Users
      description: Retornar um usuário de acordo com o ID
      operationId: findUserByID
      parameters:
        - name: id
          in: path
          description: ID do usuário
          required: true
          schema:
            type: number
            example: 1
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Users"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: string
                    example: 404
                  message:
                    type: string
                    example: Usuário não encontrado
